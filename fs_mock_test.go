// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clicache

import (
	"os"
	"sync"
)

// FileSystemMock is a mock implementation of FileSystem.
//
//	func TestSomethingThatUsesFileSystem(t *testing.T) {
//
//		// make and configure a mocked FileSystem
//		mockedFileSystem := &FileSystemMock{
//			CreateFunc: func(name string) (*os.File, error) {
//				panic("mock out the Create method")
//			},
//			IsNotExistFunc: func(err error) bool {
//				panic("mock out the IsNotExist method")
//			},
//			OpenFunc: func(name string) (*os.File, error) {
//				panic("mock out the Open method")
//			},
//			RemoveFunc: func(name string) error {
//				panic("mock out the Remove method")
//			},
//		}
//
//		// use mockedFileSystem in code that requires FileSystem
//		// and then make assertions.
//
//	}
type FileSystemMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(name string) (*os.File, error)

	// IsNotExistFunc mocks the IsNotExist method.
	IsNotExistFunc func(err error) bool

	// OpenFunc mocks the Open method.
	OpenFunc func(name string) (*os.File, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(name string) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Name is the name argument value.
			Name string
		}
		// IsNotExist holds details about calls to the IsNotExist method.
		IsNotExist []struct {
			// Err is the err argument value.
			Err error
		}
		// Open holds details about calls to the Open method.
		Open []struct {
			// Name is the name argument value.
			Name string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockCreate     sync.RWMutex
	lockIsNotExist sync.RWMutex
	lockOpen       sync.RWMutex
	lockRemove     sync.RWMutex
}

// Create calls CreateFunc.
func (mock *FileSystemMock) Create(name string) (*os.File, error) {
	if mock.CreateFunc == nil {
		panic("FileSystemMock.CreateFunc: method is nil but FileSystem.Create was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(name)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedFileSystem.CreateCalls())
func (mock *FileSystemMock) CreateCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// IsNotExist calls IsNotExistFunc.
func (mock *FileSystemMock) IsNotExist(err error) bool {
	if mock.IsNotExistFunc == nil {
		panic("FileSystemMock.IsNotExistFunc: method is nil but FileSystem.IsNotExist was just called")
	}
	callInfo := struct {
		Err error
	}{
		Err: err,
	}
	mock.lockIsNotExist.Lock()
	mock.calls.IsNotExist = append(mock.calls.IsNotExist, callInfo)
	mock.lockIsNotExist.Unlock()
	return mock.IsNotExistFunc(err)
}

// IsNotExistCalls gets all the calls that were made to IsNotExist.
// Check the length with:
//
//	len(mockedFileSystem.IsNotExistCalls())
func (mock *FileSystemMock) IsNotExistCalls() []struct {
	Err error
} {
	var calls []struct {
		Err error
	}
	mock.lockIsNotExist.RLock()
	calls = mock.calls.IsNotExist
	mock.lockIsNotExist.RUnlock()
	return calls
}

// Open calls OpenFunc.
func (mock *FileSystemMock) Open(name string) (*os.File, error) {
	if mock.OpenFunc == nil {
		panic("FileSystemMock.OpenFunc: method is nil but FileSystem.Open was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockOpen.Lock()
	mock.calls.Open = append(mock.calls.Open, callInfo)
	mock.lockOpen.Unlock()
	return mock.OpenFunc(name)
}

// OpenCalls gets all the calls that were made to Open.
// Check the length with:
//
//	len(mockedFileSystem.OpenCalls())
func (mock *FileSystemMock) OpenCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockOpen.RLock()
	calls = mock.calls.Open
	mock.lockOpen.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *FileSystemMock) Remove(name string) error {
	if mock.RemoveFunc == nil {
		panic("FileSystemMock.RemoveFunc: method is nil but FileSystem.Remove was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(name)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedFileSystem.RemoveCalls())
func (mock *FileSystemMock) RemoveCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}
